# Create Data Collection Task

```shell
curl "https://api.scaleapi.com/v1/task/datacollection" \
  -u "{{ApiKey}}:" \
  -d callback_url="http://www.example.com/callback" \
  -d instruction="Find the URL for the hiring page for the company with attached website." \
  -d attachment_type=website \
  -d attachment="https://www.scaleapi.com/" \
  -d fields[hiring_page]="Hiring Page URL"
```

```python
import scaleapi

client = scaleapi.ScaleClient('{{ApiKey}}')

client.create_datacollection_task(
    callback_url='http://www.example.com/callback',
    instruction='Find the URL for the hiring page for the company with attached website.',
    attachment_type='website',
    attachment='https://www.scaleapi.com',
    fields={
        'hiring_page': 'Hiring Page URL'
    }
)
```

```javascript
var scaleapi = require('scaleapi');

var client = scaleapi.ScaleClient('{{ApiKey}}');

client.createDatacollectionTask({
  'callback_url': 'http://www.example.com/callback',
  'instruction': 'Find the URL for the hiring page for the company with attached website.',
  'attachment_type': 'website',
  'attachment': 'https://www.scaleapi.com/',
  'fields': {
    'hiring_page': 'Hiring Page URL'
  }
}, (err, task) => {
    // do something with task
});
```

```ruby
require 'scale'
scale = Scale.new(api_key: '{{ApiKey}}')

scale.create_datacollection_task({
  callback_url: 'http://www.example.com/callback',
  instruction: 'Find the URL for the hiring page for the company with attached website.',
  attachment: 'https://www.scaleapi.com/',
  attachment_type: 'website',
  fields: {
    hiring_page: 'Hiring Page URL'
  }
})
=> #<Scale::Api::Tasks::Datacollection:0x007fcc109b7a38 @task_id="58a63649aa9d139b20a42531", @type="datacollection", @instruction="Find the URL for the hiring page for the company with attached website.", @params={"fields"=>{"hiring_page"=>"Hiring Page URL"}, "attachment"=>"https://www.scaleapi.com/", "attachment_type"=>"website"}, @urgency="standard", @response=nil, @callback_url="http://www.example.com/callback", @created_at=2017-02-16 23:31:21 UTC, @status="pending", @completed_at=nil, @callback_succeeded_at=nil, @metadata={}>
```

> The above command returns an object structured like this:

```json
{
  "task_id": "576de9dc1ea5f917d56fc2a0",
  "created_at": "2016-06-25T02:18:04.248Z",
  "callback_url": "http://www.example.com/callback",
  "type": "datacollection",
  "status": "pending",
  "instruction": "Find the URL for the hiring page for the company with attached website.",
  "urgency": "standard",
  "params": {
    "fields": {
      "hiring_page": "Hiring Page URL"
    },
    "attachment": "http://www.scaleapi.com/",
    "attachment_type": "website"
  },
  "metadata": {}
}
```

<aside class="notice">
Please contact <a href="mailto:sales@scaleapi.com">sales@scaleapi.com</a> before using this endpoint.
</aside>

This endpoint creates a `datacollection` task. In this task, one of our workers will try to find some information through the internet, following the instructions that you provide. Example use cases could be finding the product page of a particular product on Amazon, or trying to find the email of a particular person given their name and position.

This task involves a [markdown-enabled](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) `instruction` about how to find the information, an `attachment` detailing the particular data you'd like to collect, an `attachment_type`, and a `fields` parameter, which describes all of the different pieces of information you'd like captured.

The `fields` parameter is a dictionary where the keys are the keys you'd like the results to be returned under, and values are the descriptions you'd like to show the human Scaler.

If successful, Scale will immediately return the generated task object, of which you should at least store the `task_id`.

The parameters `attachment_type`, `attachment`, and `fields` will be stored in the `params` object of the constructed `task` object.

### HTTP Request

`POST https://api.scaleapi.com/v1/task/datacollection`

### Parameters

Parameter | Type | Description
--------- | ---- | -------
`callback_url` | string | The full url (including the scheme `http://` or `https://`) of the callback when the task is completed. See the [Callback section](#callbacks) for more details about callbacks.
`instruction` | string | A markdown-enabled string explaining how to collect the data. You can use [markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) to show example images, give structure to your instructions, and more.
`attachment_type` | string | One of `text`, `image`, or `website`. Describes what type of file the attachment is.
`attachment` | string | The attachment detailing the data to be collected. If `attachment_type` is `text`, then it should be plaintext. Otherwise, it should be a URL pointing to the attachment.
`fields` | dictionary | A dictionary corresponding to the fields of information to be collected. Keys are the keys you'd like the fields to be returned under, and values are descriptions to be shown to human workers.
`urgency` (optional, default `standard`) | string | A string describing the urgency of the response, one of `express`, `standard`, or `no-rush`. See the [Urgency section](#urgency) for more details.
`metadata` (optional, default `{}`) | object | A set of key/value pairs that you can attach to a task object. It can be useful for storing additional information about the task in a structured format.

## Callback Format

> Example callback body

```json
{
  "response": {
    "fields": {
      "hiring_page": "Hiring Page URL"
    }
  },
  "task_id": "576ba74eec471ff9b01557cc",
  "task": {
    // populated task for convenience
    ...
  }
}
```

The `response` object, which is part of the callback POST request and permanently stored as part of the task object, will have a `fields` object and `time_spent_in_seconds`, an integer.

`fields` will have keys corresponding to the keys you provided in the parameters, with values the transcribed value.

`time_spent_in_seconds` represents the time spent looking for the data you specified, not including the time spent in our review processes.

<aside class="notice">
See the <a href="#callbacks">Callback section</a> for more details about callbacks.
</aside>
